'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="DbFlight")>  _
Partial Public Class DbFlightDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCargo(instance As Cargo)
    End Sub
  Partial Private Sub UpdateCargo(instance As Cargo)
    End Sub
  Partial Private Sub DeleteCargo(instance As Cargo)
    End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  Partial Private Sub InsertFlight(instance As Flight)
    End Sub
  Partial Private Sub UpdateFlight(instance As Flight)
    End Sub
  Partial Private Sub DeleteFlight(instance As Flight)
    End Sub
  Partial Private Sub InsertFlight_Cargo(instance As Flight_Cargo)
    End Sub
  Partial Private Sub UpdateFlight_Cargo(instance As Flight_Cargo)
    End Sub
  Partial Private Sub DeleteFlight_Cargo(instance As Flight_Cargo)
    End Sub
  Partial Private Sub InsertLuggage(instance As Luggage)
    End Sub
  Partial Private Sub UpdateLuggage(instance As Luggage)
    End Sub
  Partial Private Sub DeleteLuggage(instance As Luggage)
    End Sub
  Partial Private Sub InsertPayment(instance As Payment)
    End Sub
  Partial Private Sub UpdatePayment(instance As Payment)
    End Sub
  Partial Private Sub DeletePayment(instance As Payment)
    End Sub
  Partial Private Sub InsertReservation(instance As Reservation)
    End Sub
  Partial Private Sub UpdateReservation(instance As Reservation)
    End Sub
  Partial Private Sub DeleteReservation(instance As Reservation)
    End Sub
  Partial Private Sub InsertSeat(instance As Seat)
    End Sub
  Partial Private Sub UpdateSeat(instance As Seat)
    End Sub
  Partial Private Sub DeleteSeat(instance As Seat)
    End Sub
  Partial Private Sub InsertStaff(instance As Staff)
    End Sub
  Partial Private Sub UpdateStaff(instance As Staff)
    End Sub
  Partial Private Sub DeleteStaff(instance As Staff)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.assignment.My.MySettings.Default.DbFlightConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Cargos() As System.Data.Linq.Table(Of Cargo)
		Get
			Return Me.GetTable(Of Cargo)
		End Get
	End Property
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property Flights() As System.Data.Linq.Table(Of Flight)
		Get
			Return Me.GetTable(Of Flight)
		End Get
	End Property
	
	Public ReadOnly Property Flight_Cargos() As System.Data.Linq.Table(Of Flight_Cargo)
		Get
			Return Me.GetTable(Of Flight_Cargo)
		End Get
	End Property
	
	Public ReadOnly Property Luggages() As System.Data.Linq.Table(Of Luggage)
		Get
			Return Me.GetTable(Of Luggage)
		End Get
	End Property
	
	Public ReadOnly Property Payments() As System.Data.Linq.Table(Of Payment)
		Get
			Return Me.GetTable(Of Payment)
		End Get
	End Property
	
	Public ReadOnly Property Reservations() As System.Data.Linq.Table(Of Reservation)
		Get
			Return Me.GetTable(Of Reservation)
		End Get
	End Property
	
	Public ReadOnly Property Seats() As System.Data.Linq.Table(Of Seat)
		Get
			Return Me.GetTable(Of Seat)
		End Get
	End Property
	
	Public ReadOnly Property Staffs() As System.Data.Linq.Table(Of Staff)
		Get
			Return Me.GetTable(Of Staff)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cargo")>  _
Partial Public Class Cargo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CargoID As String
	
	Private _Weight As Decimal
	
	Private _Conditions As String
	
	Private _Address As String
	
	Private _City As String
	
	Private _State As String
	
	Private _PostalCode As Integer
	
	Private _PaymentID As String
	
	Private _Flight_Cargos As EntitySet(Of Flight_Cargo)
	
	Private _Payment As EntityRef(Of Payment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCargoIDChanging(value As String)
    End Sub
    Partial Private Sub OnCargoIDChanged()
    End Sub
    Partial Private Sub OnWeightChanging(value As Decimal)
    End Sub
    Partial Private Sub OnWeightChanged()
    End Sub
    Partial Private Sub OnConditionsChanging(value As String)
    End Sub
    Partial Private Sub OnConditionsChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnPostalCodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnPostalCodeChanged()
    End Sub
    Partial Private Sub OnPaymentIDChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Flight_Cargos = New EntitySet(Of Flight_Cargo)(AddressOf Me.attach_Flight_Cargos, AddressOf Me.detach_Flight_Cargos)
		Me._Payment = CType(Nothing, EntityRef(Of Payment))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CargoID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CargoID() As String
		Get
			Return Me._CargoID
		End Get
		Set
			If (String.Equals(Me._CargoID, value) = false) Then
				Me.OnCargoIDChanging(value)
				Me.SendPropertyChanging
				Me._CargoID = value
				Me.SendPropertyChanged("CargoID")
				Me.OnCargoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight", DbType:="Decimal(3,2) NOT NULL")>  _
	Public Property Weight() As Decimal
		Get
			Return Me._Weight
		End Get
		Set
			If ((Me._Weight = value)  _
						= false) Then
				Me.OnWeightChanging(value)
				Me.SendPropertyChanging
				Me._Weight = value
				Me.SendPropertyChanged("Weight")
				Me.OnWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Conditions", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Conditions() As String
		Get
			Return Me._Conditions
		End Get
		Set
			If (String.Equals(Me._Conditions, value) = false) Then
				Me.OnConditionsChanging(value)
				Me.SendPropertyChanging
				Me._Conditions = value
				Me.SendPropertyChanged("Conditions")
				Me.OnConditionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="Int NOT NULL")>  _
	Public Property PostalCode() As Integer
		Get
			Return Me._PostalCode
		End Get
		Set
			If ((Me._PostalCode = value)  _
						= false) Then
				Me.OnPostalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostalCode = value
				Me.SendPropertyChanged("PostalCode")
				Me.OnPostalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property PaymentID() As String
		Get
			Return Me._PaymentID
		End Get
		Set
			If (String.Equals(Me._PaymentID, value) = false) Then
				If Me._Payment.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentIDChanging(value)
				Me.SendPropertyChanging
				Me._PaymentID = value
				Me.SendPropertyChanged("PaymentID")
				Me.OnPaymentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cargo_Flight_Cargo", Storage:="_Flight_Cargos", ThisKey:="CargoID", OtherKey:="CargoID")>  _
	Public Property Flight_Cargos() As EntitySet(Of Flight_Cargo)
		Get
			Return Me._Flight_Cargos
		End Get
		Set
			Me._Flight_Cargos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Payment_Cargo", Storage:="_Payment", ThisKey:="PaymentID", OtherKey:="PaymentID", IsForeignKey:=true)>  _
	Public Property Payment() As Payment
		Get
			Return Me._Payment.Entity
		End Get
		Set
			Dim previousValue As Payment = Me._Payment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Payment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Payment.Entity = Nothing
					previousValue.Cargos.Remove(Me)
				End If
				Me._Payment.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cargos.Add(Me)
					Me._PaymentID = value.PaymentID
				Else
					Me._PaymentID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Payment")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Flight_Cargos(ByVal entity As Flight_Cargo)
		Me.SendPropertyChanging
		entity.Cargo = Me
	End Sub
	
	Private Sub detach_Flight_Cargos(ByVal entity As Flight_Cargo)
		Me.SendPropertyChanging
		entity.Cargo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customers")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustID As String
	
	Private _CustName As String
	
	Private _CustICNo As String
	
	Private _CustGender As String
	
	Private _CustPhoneNo As String
	
	Private _CustAddress As String
	
	Private _CustType As String
	
	Private _MemberPassword As String
	
	Private _Question As String
	
	Private _Answer As String
	
	Private _Reservations As EntitySet(Of Reservation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustIDChanging(value As String)
    End Sub
    Partial Private Sub OnCustIDChanged()
    End Sub
    Partial Private Sub OnCustNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustNameChanged()
    End Sub
    Partial Private Sub OnCustICNoChanging(value As String)
    End Sub
    Partial Private Sub OnCustICNoChanged()
    End Sub
    Partial Private Sub OnCustGenderChanging(value As String)
    End Sub
    Partial Private Sub OnCustGenderChanged()
    End Sub
    Partial Private Sub OnCustPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnCustPhoneNoChanged()
    End Sub
    Partial Private Sub OnCustAddressChanging(value As String)
    End Sub
    Partial Private Sub OnCustAddressChanged()
    End Sub
    Partial Private Sub OnCustTypeChanging(value As String)
    End Sub
    Partial Private Sub OnCustTypeChanged()
    End Sub
    Partial Private Sub OnMemberPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnMemberPasswordChanged()
    End Sub
    Partial Private Sub OnQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionChanged()
    End Sub
    Partial Private Sub OnAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnAnswerChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Reservations = New EntitySet(Of Reservation)(AddressOf Me.attach_Reservations, AddressOf Me.detach_Reservations)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CustID() As String
		Get
			Return Me._CustID
		End Get
		Set
			If (String.Equals(Me._CustID, value) = false) Then
				Me.OnCustIDChanging(value)
				Me.SendPropertyChanging
				Me._CustID = value
				Me.SendPropertyChanged("CustID")
				Me.OnCustIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CustName() As String
		Get
			Return Me._CustName
		End Get
		Set
			If (String.Equals(Me._CustName, value) = false) Then
				Me.OnCustNameChanging(value)
				Me.SendPropertyChanging
				Me._CustName = value
				Me.SendPropertyChanged("CustName")
				Me.OnCustNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustICNo", DbType:="VarChar(14) NOT NULL", CanBeNull:=false)>  _
	Public Property CustICNo() As String
		Get
			Return Me._CustICNo
		End Get
		Set
			If (String.Equals(Me._CustICNo, value) = false) Then
				Me.OnCustICNoChanging(value)
				Me.SendPropertyChanging
				Me._CustICNo = value
				Me.SendPropertyChanged("CustICNo")
				Me.OnCustICNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustGender", DbType:="VarChar(6) NOT NULL", CanBeNull:=false)>  _
	Public Property CustGender() As String
		Get
			Return Me._CustGender
		End Get
		Set
			If (String.Equals(Me._CustGender, value) = false) Then
				Me.OnCustGenderChanging(value)
				Me.SendPropertyChanging
				Me._CustGender = value
				Me.SendPropertyChanged("CustGender")
				Me.OnCustGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustPhoneNo", DbType:="VarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property CustPhoneNo() As String
		Get
			Return Me._CustPhoneNo
		End Get
		Set
			If (String.Equals(Me._CustPhoneNo, value) = false) Then
				Me.OnCustPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._CustPhoneNo = value
				Me.SendPropertyChanged("CustPhoneNo")
				Me.OnCustPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustAddress", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property CustAddress() As String
		Get
			Return Me._CustAddress
		End Get
		Set
			If (String.Equals(Me._CustAddress, value) = false) Then
				Me.OnCustAddressChanging(value)
				Me.SendPropertyChanging
				Me._CustAddress = value
				Me.SendPropertyChanged("CustAddress")
				Me.OnCustAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustType", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property CustType() As String
		Get
			Return Me._CustType
		End Get
		Set
			If (String.Equals(Me._CustType, value) = false) Then
				Me.OnCustTypeChanging(value)
				Me.SendPropertyChanging
				Me._CustType = value
				Me.SendPropertyChanged("CustType")
				Me.OnCustTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberPassword", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property MemberPassword() As String
		Get
			Return Me._MemberPassword
		End Get
		Set
			If (String.Equals(Me._MemberPassword, value) = false) Then
				Me.OnMemberPasswordChanging(value)
				Me.SendPropertyChanging
				Me._MemberPassword = value
				Me.SendPropertyChanged("MemberPassword")
				Me.OnMemberPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Question", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Question() As String
		Get
			Return Me._Question
		End Get
		Set
			If (String.Equals(Me._Question, value) = false) Then
				Me.OnQuestionChanging(value)
				Me.SendPropertyChanging
				Me._Question = value
				Me.SendPropertyChanged("Question")
				Me.OnQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Answer() As String
		Get
			Return Me._Answer
		End Get
		Set
			If (String.Equals(Me._Answer, value) = false) Then
				Me.OnAnswerChanging(value)
				Me.SendPropertyChanging
				Me._Answer = value
				Me.SendPropertyChanged("Answer")
				Me.OnAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Reservation", Storage:="_Reservations", ThisKey:="CustID", OtherKey:="CustID")>  _
	Public Property Reservations() As EntitySet(Of Reservation)
		Get
			Return Me._Reservations
		End Get
		Set
			Me._Reservations.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Reservations(ByVal entity As Reservation)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_Reservations(ByVal entity As Reservation)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Flight")>  _
Partial Public Class Flight
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FlightID As String
	
	Private _FlightName As String
	
	Private _FlightNumber As String
	
	Private _DepartDate As Date
	
	Private _DepartTime As System.TimeSpan
	
	Private _Destination As String
	
	Private _Gate As Integer
	
	Private _StaffID As String
	
	Private _Flight_Cargos As EntitySet(Of Flight_Cargo)
	
	Private _Reservations As EntitySet(Of Reservation)
	
	Private _Staff As EntityRef(Of Staff)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFlightIDChanging(value As String)
    End Sub
    Partial Private Sub OnFlightIDChanged()
    End Sub
    Partial Private Sub OnFlightNameChanging(value As String)
    End Sub
    Partial Private Sub OnFlightNameChanged()
    End Sub
    Partial Private Sub OnFlightNumberChanging(value As String)
    End Sub
    Partial Private Sub OnFlightNumberChanged()
    End Sub
    Partial Private Sub OnDepartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnDepartDateChanged()
    End Sub
    Partial Private Sub OnDepartTimeChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnDepartTimeChanged()
    End Sub
    Partial Private Sub OnDestinationChanging(value As String)
    End Sub
    Partial Private Sub OnDestinationChanged()
    End Sub
    Partial Private Sub OnGateChanging(value As Integer)
    End Sub
    Partial Private Sub OnGateChanged()
    End Sub
    Partial Private Sub OnStaffIDChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Flight_Cargos = New EntitySet(Of Flight_Cargo)(AddressOf Me.attach_Flight_Cargos, AddressOf Me.detach_Flight_Cargos)
		Me._Reservations = New EntitySet(Of Reservation)(AddressOf Me.attach_Reservations, AddressOf Me.detach_Reservations)
		Me._Staff = CType(Nothing, EntityRef(Of Staff))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlightID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FlightID() As String
		Get
			Return Me._FlightID
		End Get
		Set
			If (String.Equals(Me._FlightID, value) = false) Then
				Me.OnFlightIDChanging(value)
				Me.SendPropertyChanging
				Me._FlightID = value
				Me.SendPropertyChanged("FlightID")
				Me.OnFlightIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlightName", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property FlightName() As String
		Get
			Return Me._FlightName
		End Get
		Set
			If (String.Equals(Me._FlightName, value) = false) Then
				Me.OnFlightNameChanging(value)
				Me.SendPropertyChanging
				Me._FlightName = value
				Me.SendPropertyChanged("FlightName")
				Me.OnFlightNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlightNumber", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property FlightNumber() As String
		Get
			Return Me._FlightNumber
		End Get
		Set
			If (String.Equals(Me._FlightNumber, value) = false) Then
				Me.OnFlightNumberChanging(value)
				Me.SendPropertyChanging
				Me._FlightNumber = value
				Me.SendPropertyChanged("FlightNumber")
				Me.OnFlightNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartDate", DbType:="Date NOT NULL")>  _
	Public Property DepartDate() As Date
		Get
			Return Me._DepartDate
		End Get
		Set
			If ((Me._DepartDate = value)  _
						= false) Then
				Me.OnDepartDateChanging(value)
				Me.SendPropertyChanging
				Me._DepartDate = value
				Me.SendPropertyChanged("DepartDate")
				Me.OnDepartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartTime", DbType:="Time NOT NULL")>  _
	Public Property DepartTime() As System.TimeSpan
		Get
			Return Me._DepartTime
		End Get
		Set
			If ((Me._DepartTime = value)  _
						= false) Then
				Me.OnDepartTimeChanging(value)
				Me.SendPropertyChanging
				Me._DepartTime = value
				Me.SendPropertyChanged("DepartTime")
				Me.OnDepartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Destination", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Destination() As String
		Get
			Return Me._Destination
		End Get
		Set
			If (String.Equals(Me._Destination, value) = false) Then
				Me.OnDestinationChanging(value)
				Me.SendPropertyChanging
				Me._Destination = value
				Me.SendPropertyChanged("Destination")
				Me.OnDestinationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gate", DbType:="Int NOT NULL")>  _
	Public Property Gate() As Integer
		Get
			Return Me._Gate
		End Get
		Set
			If ((Me._Gate = value)  _
						= false) Then
				Me.OnGateChanging(value)
				Me.SendPropertyChanging
				Me._Gate = value
				Me.SendPropertyChanged("Gate")
				Me.OnGateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property StaffID() As String
		Get
			Return Me._StaffID
		End Get
		Set
			If (String.Equals(Me._StaffID, value) = false) Then
				If Me._Staff.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffIDChanging(value)
				Me.SendPropertyChanging
				Me._StaffID = value
				Me.SendPropertyChanged("StaffID")
				Me.OnStaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Flight_Flight_Cargo", Storage:="_Flight_Cargos", ThisKey:="FlightID", OtherKey:="FlightID")>  _
	Public Property Flight_Cargos() As EntitySet(Of Flight_Cargo)
		Get
			Return Me._Flight_Cargos
		End Get
		Set
			Me._Flight_Cargos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Flight_Reservation", Storage:="_Reservations", ThisKey:="FlightID", OtherKey:="FlightID")>  _
	Public Property Reservations() As EntitySet(Of Reservation)
		Get
			Return Me._Reservations
		End Get
		Set
			Me._Reservations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_Flight", Storage:="_Staff", ThisKey:="StaffID", OtherKey:="StaffID", IsForeignKey:=true)>  _
	Public Property Staff() As Staff
		Get
			Return Me._Staff.Entity
		End Get
		Set
			Dim previousValue As Staff = Me._Staff.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Staff.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Staff.Entity = Nothing
					previousValue.Flights.Remove(Me)
				End If
				Me._Staff.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Flights.Add(Me)
					Me._StaffID = value.StaffID
				Else
					Me._StaffID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Staff")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Flight_Cargos(ByVal entity As Flight_Cargo)
		Me.SendPropertyChanging
		entity.Flight = Me
	End Sub
	
	Private Sub detach_Flight_Cargos(ByVal entity As Flight_Cargo)
		Me.SendPropertyChanging
		entity.Flight = Nothing
	End Sub
	
	Private Sub attach_Reservations(ByVal entity As Reservation)
		Me.SendPropertyChanging
		entity.Flight = Me
	End Sub
	
	Private Sub detach_Reservations(ByVal entity As Reservation)
		Me.SendPropertyChanging
		entity.Flight = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Flight_Cargo")>  _
Partial Public Class Flight_Cargo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FlightID As String
	
	Private _CargoID As String
	
	Private _Date As Date
	
	Private _Cargo As EntityRef(Of Cargo)
	
	Private _Flight As EntityRef(Of Flight)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFlightIDChanging(value As String)
    End Sub
    Partial Private Sub OnFlightIDChanged()
    End Sub
    Partial Private Sub OnCargoIDChanging(value As String)
    End Sub
    Partial Private Sub OnCargoIDChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As Date)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cargo = CType(Nothing, EntityRef(Of Cargo))
		Me._Flight = CType(Nothing, EntityRef(Of Flight))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlightID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FlightID() As String
		Get
			Return Me._FlightID
		End Get
		Set
			If (String.Equals(Me._FlightID, value) = false) Then
				If Me._Flight.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFlightIDChanging(value)
				Me.SendPropertyChanging
				Me._FlightID = value
				Me.SendPropertyChanged("FlightID")
				Me.OnFlightIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CargoID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CargoID() As String
		Get
			Return Me._CargoID
		End Get
		Set
			If (String.Equals(Me._CargoID, value) = false) Then
				If Me._Cargo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCargoIDChanging(value)
				Me.SendPropertyChanging
				Me._CargoID = value
				Me.SendPropertyChanged("CargoID")
				Me.OnCargoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date NOT NULL")>  _
	Public Property [Date]() As Date
		Get
			Return Me._Date
		End Get
		Set
			If ((Me._Date = value)  _
						= false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cargo_Flight_Cargo", Storage:="_Cargo", ThisKey:="CargoID", OtherKey:="CargoID", IsForeignKey:=true)>  _
	Public Property Cargo() As Cargo
		Get
			Return Me._Cargo.Entity
		End Get
		Set
			Dim previousValue As Cargo = Me._Cargo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cargo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cargo.Entity = Nothing
					previousValue.Flight_Cargos.Remove(Me)
				End If
				Me._Cargo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Flight_Cargos.Add(Me)
					Me._CargoID = value.CargoID
				Else
					Me._CargoID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Cargo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Flight_Flight_Cargo", Storage:="_Flight", ThisKey:="FlightID", OtherKey:="FlightID", IsForeignKey:=true)>  _
	Public Property Flight() As Flight
		Get
			Return Me._Flight.Entity
		End Get
		Set
			Dim previousValue As Flight = Me._Flight.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Flight.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Flight.Entity = Nothing
					previousValue.Flight_Cargos.Remove(Me)
				End If
				Me._Flight.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Flight_Cargos.Add(Me)
					Me._FlightID = value.FlightID
				Else
					Me._FlightID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Flight")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Luggage")>  _
Partial Public Class Luggage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LuggageID As String
	
	Private _Weight As Decimal
	
	Private _Conditions As String
	
	Private _BookID As String
	
	Private _Reservation As EntityRef(Of Reservation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLuggageIDChanging(value As String)
    End Sub
    Partial Private Sub OnLuggageIDChanged()
    End Sub
    Partial Private Sub OnWeightChanging(value As Decimal)
    End Sub
    Partial Private Sub OnWeightChanged()
    End Sub
    Partial Private Sub OnConditionsChanging(value As String)
    End Sub
    Partial Private Sub OnConditionsChanged()
    End Sub
    Partial Private Sub OnBookIDChanging(value As String)
    End Sub
    Partial Private Sub OnBookIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Reservation = CType(Nothing, EntityRef(Of Reservation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LuggageID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property LuggageID() As String
		Get
			Return Me._LuggageID
		End Get
		Set
			If (String.Equals(Me._LuggageID, value) = false) Then
				Me.OnLuggageIDChanging(value)
				Me.SendPropertyChanging
				Me._LuggageID = value
				Me.SendPropertyChanged("LuggageID")
				Me.OnLuggageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight", DbType:="Decimal(3,2) NOT NULL")>  _
	Public Property Weight() As Decimal
		Get
			Return Me._Weight
		End Get
		Set
			If ((Me._Weight = value)  _
						= false) Then
				Me.OnWeightChanging(value)
				Me.SendPropertyChanging
				Me._Weight = value
				Me.SendPropertyChanged("Weight")
				Me.OnWeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Conditions", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Conditions() As String
		Get
			Return Me._Conditions
		End Get
		Set
			If (String.Equals(Me._Conditions, value) = false) Then
				Me.OnConditionsChanging(value)
				Me.SendPropertyChanging
				Me._Conditions = value
				Me.SendPropertyChanged("Conditions")
				Me.OnConditionsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property BookID() As String
		Get
			Return Me._BookID
		End Get
		Set
			If (String.Equals(Me._BookID, value) = false) Then
				If Me._Reservation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBookIDChanging(value)
				Me.SendPropertyChanging
				Me._BookID = value
				Me.SendPropertyChanged("BookID")
				Me.OnBookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Reservation_Luggage", Storage:="_Reservation", ThisKey:="BookID", OtherKey:="BookID", IsForeignKey:=true)>  _
	Public Property Reservation() As Reservation
		Get
			Return Me._Reservation.Entity
		End Get
		Set
			Dim previousValue As Reservation = Me._Reservation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Reservation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Reservation.Entity = Nothing
					previousValue.Luggages.Remove(Me)
				End If
				Me._Reservation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Luggages.Add(Me)
					Me._BookID = value.BookID
				Else
					Me._BookID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Reservation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Payment")>  _
Partial Public Class Payment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PaymentID As String
	
	Private _PaymentType As String
	
	Private _Total As Decimal
	
	Private _PaymentDate As Date
	
	Private _BookID As String
	
	Private _Cargos As EntitySet(Of Cargo)
	
	Private _Reservation As EntityRef(Of Reservation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPaymentIDChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentIDChanged()
    End Sub
    Partial Private Sub OnPaymentTypeChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentTypeChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnPaymentDateChanging(value As Date)
    End Sub
    Partial Private Sub OnPaymentDateChanged()
    End Sub
    Partial Private Sub OnBookIDChanging(value As String)
    End Sub
    Partial Private Sub OnBookIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cargos = New EntitySet(Of Cargo)(AddressOf Me.attach_Cargos, AddressOf Me.detach_Cargos)
		Me._Reservation = CType(Nothing, EntityRef(Of Reservation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property PaymentID() As String
		Get
			Return Me._PaymentID
		End Get
		Set
			If (String.Equals(Me._PaymentID, value) = false) Then
				Me.OnPaymentIDChanging(value)
				Me.SendPropertyChanging
				Me._PaymentID = value
				Me.SendPropertyChanged("PaymentID")
				Me.OnPaymentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentType", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property PaymentType() As String
		Get
			Return Me._PaymentType
		End Get
		Set
			If (String.Equals(Me._PaymentType, value) = false) Then
				Me.OnPaymentTypeChanging(value)
				Me.SendPropertyChanging
				Me._PaymentType = value
				Me.SendPropertyChanged("PaymentType")
				Me.OnPaymentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(5,2) NOT NULL")>  _
	Public Property Total() As Decimal
		Get
			Return Me._Total
		End Get
		Set
			If ((Me._Total = value)  _
						= false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentDate", DbType:="Date NOT NULL")>  _
	Public Property PaymentDate() As Date
		Get
			Return Me._PaymentDate
		End Get
		Set
			If ((Me._PaymentDate = value)  _
						= false) Then
				Me.OnPaymentDateChanging(value)
				Me.SendPropertyChanging
				Me._PaymentDate = value
				Me.SendPropertyChanged("PaymentDate")
				Me.OnPaymentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property BookID() As String
		Get
			Return Me._BookID
		End Get
		Set
			If (String.Equals(Me._BookID, value) = false) Then
				If Me._Reservation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBookIDChanging(value)
				Me.SendPropertyChanging
				Me._BookID = value
				Me.SendPropertyChanged("BookID")
				Me.OnBookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Payment_Cargo", Storage:="_Cargos", ThisKey:="PaymentID", OtherKey:="PaymentID")>  _
	Public Property Cargos() As EntitySet(Of Cargo)
		Get
			Return Me._Cargos
		End Get
		Set
			Me._Cargos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Reservation_Payment", Storage:="_Reservation", ThisKey:="BookID", OtherKey:="BookID", IsForeignKey:=true)>  _
	Public Property Reservation() As Reservation
		Get
			Return Me._Reservation.Entity
		End Get
		Set
			Dim previousValue As Reservation = Me._Reservation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Reservation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Reservation.Entity = Nothing
					previousValue.Payments.Remove(Me)
				End If
				Me._Reservation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Payments.Add(Me)
					Me._BookID = value.BookID
				Else
					Me._BookID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Reservation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cargos(ByVal entity As Cargo)
		Me.SendPropertyChanging
		entity.Payment = Me
	End Sub
	
	Private Sub detach_Cargos(ByVal entity As Cargo)
		Me.SendPropertyChanging
		entity.Payment = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Reservation")>  _
Partial Public Class Reservation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BookID As String
	
	Private _Date As Date
	
	Private _Time As System.TimeSpan
	
	Private _FlightID As String
	
	Private _CustID As String
	
	Private _Luggages As EntitySet(Of Luggage)
	
	Private _Payments As EntitySet(Of Payment)
	
	Private _Seats As EntitySet(Of Seat)
	
	Private _Customer As EntityRef(Of Customer)
	
	Private _Flight As EntityRef(Of Flight)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBookIDChanging(value As String)
    End Sub
    Partial Private Sub OnBookIDChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As Date)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnTimeChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnTimeChanged()
    End Sub
    Partial Private Sub OnFlightIDChanging(value As String)
    End Sub
    Partial Private Sub OnFlightIDChanged()
    End Sub
    Partial Private Sub OnCustIDChanging(value As String)
    End Sub
    Partial Private Sub OnCustIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Luggages = New EntitySet(Of Luggage)(AddressOf Me.attach_Luggages, AddressOf Me.detach_Luggages)
		Me._Payments = New EntitySet(Of Payment)(AddressOf Me.attach_Payments, AddressOf Me.detach_Payments)
		Me._Seats = New EntitySet(Of Seat)(AddressOf Me.attach_Seats, AddressOf Me.detach_Seats)
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		Me._Flight = CType(Nothing, EntityRef(Of Flight))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property BookID() As String
		Get
			Return Me._BookID
		End Get
		Set
			If (String.Equals(Me._BookID, value) = false) Then
				Me.OnBookIDChanging(value)
				Me.SendPropertyChanging
				Me._BookID = value
				Me.SendPropertyChanged("BookID")
				Me.OnBookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date NOT NULL")>  _
	Public Property [Date]() As Date
		Get
			Return Me._Date
		End Get
		Set
			If ((Me._Date = value)  _
						= false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Time", DbType:="Time NOT NULL")>  _
	Public Property Time() As System.TimeSpan
		Get
			Return Me._Time
		End Get
		Set
			If ((Me._Time = value)  _
						= false) Then
				Me.OnTimeChanging(value)
				Me.SendPropertyChanging
				Me._Time = value
				Me.SendPropertyChanged("Time")
				Me.OnTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlightID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property FlightID() As String
		Get
			Return Me._FlightID
		End Get
		Set
			If (String.Equals(Me._FlightID, value) = false) Then
				If Me._Flight.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFlightIDChanging(value)
				Me.SendPropertyChanging
				Me._FlightID = value
				Me.SendPropertyChanged("FlightID")
				Me.OnFlightIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property CustID() As String
		Get
			Return Me._CustID
		End Get
		Set
			If (String.Equals(Me._CustID, value) = false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCustIDChanging(value)
				Me.SendPropertyChanging
				Me._CustID = value
				Me.SendPropertyChanged("CustID")
				Me.OnCustIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Reservation_Luggage", Storage:="_Luggages", ThisKey:="BookID", OtherKey:="BookID")>  _
	Public Property Luggages() As EntitySet(Of Luggage)
		Get
			Return Me._Luggages
		End Get
		Set
			Me._Luggages.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Reservation_Payment", Storage:="_Payments", ThisKey:="BookID", OtherKey:="BookID")>  _
	Public Property Payments() As EntitySet(Of Payment)
		Get
			Return Me._Payments
		End Get
		Set
			Me._Payments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Reservation_Seat", Storage:="_Seats", ThisKey:="BookID", OtherKey:="BookID")>  _
	Public Property Seats() As EntitySet(Of Seat)
		Get
			Return Me._Seats
		End Get
		Set
			Me._Seats.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Reservation", Storage:="_Customer", ThisKey:="CustID", OtherKey:="CustID", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Reservations.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Reservations.Add(Me)
					Me._CustID = value.CustID
				Else
					Me._CustID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Flight_Reservation", Storage:="_Flight", ThisKey:="FlightID", OtherKey:="FlightID", IsForeignKey:=true)>  _
	Public Property Flight() As Flight
		Get
			Return Me._Flight.Entity
		End Get
		Set
			Dim previousValue As Flight = Me._Flight.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Flight.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Flight.Entity = Nothing
					previousValue.Reservations.Remove(Me)
				End If
				Me._Flight.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Reservations.Add(Me)
					Me._FlightID = value.FlightID
				Else
					Me._FlightID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Flight")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Luggages(ByVal entity As Luggage)
		Me.SendPropertyChanging
		entity.Reservation = Me
	End Sub
	
	Private Sub detach_Luggages(ByVal entity As Luggage)
		Me.SendPropertyChanging
		entity.Reservation = Nothing
	End Sub
	
	Private Sub attach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.Reservation = Me
	End Sub
	
	Private Sub detach_Payments(ByVal entity As Payment)
		Me.SendPropertyChanging
		entity.Reservation = Nothing
	End Sub
	
	Private Sub attach_Seats(ByVal entity As Seat)
		Me.SendPropertyChanging
		entity.Reservation = Me
	End Sub
	
	Private Sub detach_Seats(ByVal entity As Seat)
		Me.SendPropertyChanging
		entity.Reservation = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Seat")>  _
Partial Public Class Seat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SeatID As String
	
	Private _Status As String
	
	Private _BookID As String
	
	Private _Reservation As EntityRef(Of Reservation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSeatIDChanging(value As String)
    End Sub
    Partial Private Sub OnSeatIDChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnBookIDChanging(value As String)
    End Sub
    Partial Private Sub OnBookIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Reservation = CType(Nothing, EntityRef(Of Reservation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeatID", DbType:="VarChar(3) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property SeatID() As String
		Get
			Return Me._SeatID
		End Get
		Set
			If (String.Equals(Me._SeatID, value) = false) Then
				Me.OnSeatIDChanging(value)
				Me.SendPropertyChanging
				Me._SeatID = value
				Me.SendPropertyChanged("SeatID")
				Me.OnSeatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property BookID() As String
		Get
			Return Me._BookID
		End Get
		Set
			If (String.Equals(Me._BookID, value) = false) Then
				If Me._Reservation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBookIDChanging(value)
				Me.SendPropertyChanging
				Me._BookID = value
				Me.SendPropertyChanged("BookID")
				Me.OnBookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Reservation_Seat", Storage:="_Reservation", ThisKey:="BookID", OtherKey:="BookID", IsForeignKey:=true)>  _
	Public Property Reservation() As Reservation
		Get
			Return Me._Reservation.Entity
		End Get
		Set
			Dim previousValue As Reservation = Me._Reservation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Reservation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Reservation.Entity = Nothing
					previousValue.Seats.Remove(Me)
				End If
				Me._Reservation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Seats.Add(Me)
					Me._BookID = value.BookID
				Else
					Me._BookID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Reservation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Staff")>  _
Partial Public Class Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StaffID As String
	
	Private _StaffName As String
	
	Private _StaffGender As String
	
	Private _StaffICNo As String
	
	Private _StaffPhoneNo As String
	
	Private _StaffAddress As String
	
	Private _StaffType As String
	
	Private _StaffPassword As String
	
	Private _Question As String
	
	Private _Answer As String
	
	Private _status As String
	
	Private _Flights As EntitySet(Of Flight)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStaffIDChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIDChanged()
    End Sub
    Partial Private Sub OnStaffNameChanging(value As String)
    End Sub
    Partial Private Sub OnStaffNameChanged()
    End Sub
    Partial Private Sub OnStaffGenderChanging(value As String)
    End Sub
    Partial Private Sub OnStaffGenderChanged()
    End Sub
    Partial Private Sub OnStaffICNoChanging(value As String)
    End Sub
    Partial Private Sub OnStaffICNoChanged()
    End Sub
    Partial Private Sub OnStaffPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnStaffPhoneNoChanged()
    End Sub
    Partial Private Sub OnStaffAddressChanging(value As String)
    End Sub
    Partial Private Sub OnStaffAddressChanged()
    End Sub
    Partial Private Sub OnStaffTypeChanging(value As String)
    End Sub
    Partial Private Sub OnStaffTypeChanged()
    End Sub
    Partial Private Sub OnStaffPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnStaffPasswordChanged()
    End Sub
    Partial Private Sub OnQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionChanged()
    End Sub
    Partial Private Sub OnAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnAnswerChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Flights = New EntitySet(Of Flight)(AddressOf Me.attach_Flights, AddressOf Me.detach_Flights)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property StaffID() As String
		Get
			Return Me._StaffID
		End Get
		Set
			If (String.Equals(Me._StaffID, value) = false) Then
				Me.OnStaffIDChanging(value)
				Me.SendPropertyChanging
				Me._StaffID = value
				Me.SendPropertyChanged("StaffID")
				Me.OnStaffIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffName", DbType:="VarChar(50)")>  _
	Public Property StaffName() As String
		Get
			Return Me._StaffName
		End Get
		Set
			If (String.Equals(Me._StaffName, value) = false) Then
				Me.OnStaffNameChanging(value)
				Me.SendPropertyChanging
				Me._StaffName = value
				Me.SendPropertyChanged("StaffName")
				Me.OnStaffNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffGender", DbType:="VarChar(6)")>  _
	Public Property StaffGender() As String
		Get
			Return Me._StaffGender
		End Get
		Set
			If (String.Equals(Me._StaffGender, value) = false) Then
				Me.OnStaffGenderChanging(value)
				Me.SendPropertyChanging
				Me._StaffGender = value
				Me.SendPropertyChanged("StaffGender")
				Me.OnStaffGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffICNo", DbType:="VarChar(14)")>  _
	Public Property StaffICNo() As String
		Get
			Return Me._StaffICNo
		End Get
		Set
			If (String.Equals(Me._StaffICNo, value) = false) Then
				Me.OnStaffICNoChanging(value)
				Me.SendPropertyChanging
				Me._StaffICNo = value
				Me.SendPropertyChanged("StaffICNo")
				Me.OnStaffICNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffPhoneNo", DbType:="VarChar(12)")>  _
	Public Property StaffPhoneNo() As String
		Get
			Return Me._StaffPhoneNo
		End Get
		Set
			If (String.Equals(Me._StaffPhoneNo, value) = false) Then
				Me.OnStaffPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._StaffPhoneNo = value
				Me.SendPropertyChanged("StaffPhoneNo")
				Me.OnStaffPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffAddress", DbType:="VarChar(100)")>  _
	Public Property StaffAddress() As String
		Get
			Return Me._StaffAddress
		End Get
		Set
			If (String.Equals(Me._StaffAddress, value) = false) Then
				Me.OnStaffAddressChanging(value)
				Me.SendPropertyChanging
				Me._StaffAddress = value
				Me.SendPropertyChanged("StaffAddress")
				Me.OnStaffAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffType", DbType:="VarChar(20)")>  _
	Public Property StaffType() As String
		Get
			Return Me._StaffType
		End Get
		Set
			If (String.Equals(Me._StaffType, value) = false) Then
				Me.OnStaffTypeChanging(value)
				Me.SendPropertyChanging
				Me._StaffType = value
				Me.SendPropertyChanged("StaffType")
				Me.OnStaffTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffPassword", DbType:="VarChar(20)")>  _
	Public Property StaffPassword() As String
		Get
			Return Me._StaffPassword
		End Get
		Set
			If (String.Equals(Me._StaffPassword, value) = false) Then
				Me.OnStaffPasswordChanging(value)
				Me.SendPropertyChanging
				Me._StaffPassword = value
				Me.SendPropertyChanged("StaffPassword")
				Me.OnStaffPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Question", DbType:="VarChar(100)")>  _
	Public Property Question() As String
		Get
			Return Me._Question
		End Get
		Set
			If (String.Equals(Me._Question, value) = false) Then
				Me.OnQuestionChanging(value)
				Me.SendPropertyChanging
				Me._Question = value
				Me.SendPropertyChanged("Question")
				Me.OnQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer", DbType:="VarChar(30)")>  _
	Public Property Answer() As String
		Get
			Return Me._Answer
		End Get
		Set
			If (String.Equals(Me._Answer, value) = false) Then
				Me.OnAnswerChanging(value)
				Me.SendPropertyChanging
				Me._Answer = value
				Me.SendPropertyChanged("Answer")
				Me.OnAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(20)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Staff_Flight", Storage:="_Flights", ThisKey:="StaffID", OtherKey:="StaffID")>  _
	Public Property Flights() As EntitySet(Of Flight)
		Get
			Return Me._Flights
		End Get
		Set
			Me._Flights.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Flights(ByVal entity As Flight)
		Me.SendPropertyChanging
		entity.Staff = Me
	End Sub
	
	Private Sub detach_Flights(ByVal entity As Flight)
		Me.SendPropertyChanging
		entity.Staff = Nothing
	End Sub
End Class
